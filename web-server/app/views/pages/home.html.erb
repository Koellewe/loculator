<link rel="stylesheet" href="css/spinner.css">

<div class="content">
<%= render '/layouts/title' do %><%= @title %><% end %>

<p>LoCulator is a free and open API that allows anyone to check the number of lines of code their git-based
  project has. Works for <strong>any public git repo on GitHub, BitBucket, and GitLab</strong>. (See
  <a href="/documentation">documentation</a> on private repos and special VCS providers.)</p>

  <div class="card">
    <h4>Try it out</h4>
    <div style="display: flex">
      <code class="url" style="min-width: max-content;"><span class="url-method">GET</span>
        <span id="demo-url-base"><%= @host %>/api/loc/</span>
      </code>
      <div style="width: 100%; display: flex; margin-top: -8px;">
        <input type="text" id="demo-url" value="github.com/Koellewe/loculator">
        <button onclick="onDemoClick()" id="demo-btn"><img src="icons/run.svg" width="20"></button>
      </div>
    </div>
    <div style="display: flex; margin-top: 18px;">
      <div class="muted">Result</div>
      <div style="flex-grow: 1"></div>
      <div id="demo-status"></div>
    </div>
    <div style="position: relative">
      <div class="lds-default" id="demo-spinner"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>
      <pre id="demo-json-pre"><code class="lang-json" id="demo-json"></code></pre>
    </div>
  </div>

<div style="display: flex; margin: 48px auto 12px; width: max-content">
  <button onclick="window.location.href = 'https://github.com/Koellewe/loculator'" style="display: flex;">
    <img src="https://libalex.singularity.net.za/rauten/icons/github.svg" width="36">
    <p style="padding-left: 8px;">GitHub Repo</p></button>
  <div style="width: 24px;"></div>
  <button onclick="window.location.href = '/documentation'" style="display: flex;">
    <img src="icons/docs.svg" width="36">
    <p style="padding-left: 8px;">Documentation</p></button>
</div>

</div>

<%= render 'layouts/footer'%>

<script>
  // global
  const demoJson = document.getElementById('demo-json');
  const spinner = document.getElementById('demo-spinner');
  const demoStatus = document.getElementById('demo-status');

  function demoOut(obj, xhr){
      demoJson.innerText = JSON.stringify(obj, null, 2);
      hljs.highlightBlock(demoJson);

      if (xhr.status > 0)
        demoStatus.innerText = xhr.status + ' ' + xhr.statusText

      spinner.style['display'] = 'none';
  }

  function onDemoClick(){
      demoJson.innerText = 'Running request...';
      demoStatus.innerText = '';
      spinner.style['display'] = 'block';

      const base = document.getElementById('demo-url-base').innerText;
      const url = base + document.getElementById('demo-url').value;

      const xhr = new XMLHttpRequest();
      xhr.open('GET', url);
      xhr.responseType = 'json';
      xhr.onload = function() {
          const sNum = Math.floor(xhr.status / 100)
          if (sNum === 2 || sNum === 4){
              demoOut(xhr.response, xhr)
          }else{
              demoOut({'error': 'Unexpected response: '+xhr.status}, xhr)
          }
      }
      xhr.onerror = function() {
          demoOut({'error': xhr.responseText || 'Error completing the request.'}, xhr)
      }

      xhr.send();
  }
</script>